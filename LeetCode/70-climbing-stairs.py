###############################################################################################
# 暴搜超时
###########
# 时间复杂度：O(2^n), n为阶数
# 空间复杂度：O(1)
###############################################################################################
class Solution:
    def climbStairs(self, n: int) -> int:
        res = 0
        def dfs(u):
            nonlocal res
            if u > n:
                return
            if u == n:
                res += 1
                return
            dfs(u+1)
            dfs(u+2)
        dfs(0)
        return res

###############################################################################################
# 简单动规
# 此题背包没法做，因为没法确定当m+n-2中某一步选择右or下时下一步的具体位置，就没法加上grid中的值
###########
# 时间复杂度：O(m*n)
# 空间复杂度：O(m*n)
###############################################################################################
class Solution:
    def climbStairs(self, n: int) -> int:
        if n == 1:
            return 1
        dp = [0]*n # dp[i]: 走到i的方法个数(0<=i<n)
        dp[0] = 1 # 走到第一个阶梯只有1种方法
        dp[1] = 2 # 走到第二阶梯有两种方法
        for i in range(2, n):
            dp[i] = dp[i-1] + dp[i-2]
        return dp[n-1]

# 滚动变量
class Solution:
    def climbStairs(self, n: int) -> int:
        if n <= 2:
            return n
        c = 0
        a = 1 # 走到第一个阶梯只有1种方法
        b = 2 # 走到第二阶梯有两种方法
        for i in range(2, n):
            c = a + b
            a = b
            b = c
        return c